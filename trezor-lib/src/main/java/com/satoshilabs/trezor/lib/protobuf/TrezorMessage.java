// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
// libprotoc 3.6.0
// trezor-common cb238cb1f134accc4200217d9511115a8f61c6cb

package com.satoshilabs.trezor.lib.protobuf;

public final class TrezorMessage {
  private TrezorMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireIn);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireOut);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireDebugIn);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireDebugOut);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireTiny);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireBootloader);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireNoFsm);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   **
   * Mapping between TREZOR wire identifier (uint) and a protobuf message
   * </pre>
   *
   * Protobuf enum {@code hw.trezor.messages.MessageType}
   */
  public enum MessageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Management
     * </pre>
     *
     * <code>MessageType_Initialize = 0 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    MessageType_Initialize(0),
    /**
     * <code>MessageType_Ping = 1 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_Ping(1),
    /**
     * <code>MessageType_Success = 2 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_Success(2),
    /**
     * <code>MessageType_Failure = 3 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_Failure(3),
    /**
     * <code>MessageType_ChangePin = 4 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_ChangePin(4),
    /**
     * <code>MessageType_WipeDevice = 5 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_WipeDevice(5),
    /**
     * <code>MessageType_GetEntropy = 9 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetEntropy(9),
    /**
     * <code>MessageType_Entropy = 10 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_Entropy(10),
    /**
     * <code>MessageType_LoadDevice = 13 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LoadDevice(13),
    /**
     * <code>MessageType_ResetDevice = 14 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_ResetDevice(14),
    /**
     * <code>MessageType_Features = 17 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_Features(17),
    /**
     * <code>MessageType_PinMatrixRequest = 18 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_PinMatrixRequest(18),
    /**
     * <code>MessageType_PinMatrixAck = 19 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    MessageType_PinMatrixAck(19),
    /**
     * <code>MessageType_Cancel = 20 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    MessageType_Cancel(20),
    /**
     * <code>MessageType_ClearSession = 24 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_ClearSession(24),
    /**
     * <code>MessageType_ApplySettings = 25 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_ApplySettings(25),
    /**
     * <code>MessageType_ButtonRequest = 26 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_ButtonRequest(26),
    /**
     * <code>MessageType_ButtonAck = 27 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    MessageType_ButtonAck(27),
    /**
     * <code>MessageType_ApplyFlags = 28 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_ApplyFlags(28),
    /**
     * <code>MessageType_BackupDevice = 34 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_BackupDevice(34),
    /**
     * <code>MessageType_EntropyRequest = 35 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EntropyRequest(35),
    /**
     * <code>MessageType_EntropyAck = 36 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EntropyAck(36),
    /**
     * <code>MessageType_PassphraseRequest = 41 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_PassphraseRequest(41),
    /**
     * <code>MessageType_PassphraseAck = 42 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    MessageType_PassphraseAck(42),
    /**
     * <code>MessageType_PassphraseStateRequest = 77 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_PassphraseStateRequest(77),
    /**
     * <code>MessageType_PassphraseStateAck = 78 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    MessageType_PassphraseStateAck(78),
    /**
     * <code>MessageType_RecoveryDevice = 45 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RecoveryDevice(45),
    /**
     * <code>MessageType_WordRequest = 46 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_WordRequest(46),
    /**
     * <code>MessageType_WordAck = 47 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_WordAck(47),
    /**
     * <code>MessageType_GetFeatures = 55 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetFeatures(55),
    /**
     * <code>MessageType_SetU2FCounter = 63 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SetU2FCounter(63),
    /**
     * <pre>
     * Bootloader
     * </pre>
     *
     * <code>MessageType_FirmwareErase = 6 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    MessageType_FirmwareErase(6),
    /**
     * <code>MessageType_FirmwareUpload = 7 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    MessageType_FirmwareUpload(7),
    /**
     * <code>MessageType_FirmwareRequest = 8 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    MessageType_FirmwareRequest(8),
    /**
     * <code>MessageType_SelfTest = 32 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    MessageType_SelfTest(32),
    /**
     * <pre>
     * Bitcoin
     * </pre>
     *
     * <code>MessageType_GetPublicKey = 11 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetPublicKey(11),
    /**
     * <code>MessageType_PublicKey = 12 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_PublicKey(12),
    /**
     * <code>MessageType_SignTx = 15 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SignTx(15),
    /**
     * <code>MessageType_TxRequest = 21 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TxRequest(21),
    /**
     * <code>MessageType_TxAck = 22 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TxAck(22),
    /**
     * <code>MessageType_GetAddress = 29 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetAddress(29),
    /**
     * <code>MessageType_Address = 30 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_Address(30),
    /**
     * <code>MessageType_SignMessage = 38 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SignMessage(38),
    /**
     * <code>MessageType_VerifyMessage = 39 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_VerifyMessage(39),
    /**
     * <code>MessageType_MessageSignature = 40 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MessageSignature(40),
    /**
     * <pre>
     * Crypto
     * </pre>
     *
     * <code>MessageType_CipherKeyValue = 23 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CipherKeyValue(23),
    /**
     * <code>MessageType_CipheredKeyValue = 48 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CipheredKeyValue(48),
    /**
     * <code>MessageType_SignIdentity = 53 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_SignIdentity(53),
    /**
     * <code>MessageType_SignedIdentity = 54 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_SignedIdentity(54),
    /**
     * <code>MessageType_GetECDHSessionKey = 61 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_GetECDHSessionKey(61),
    /**
     * <code>MessageType_ECDHSessionKey = 62 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_ECDHSessionKey(62),
    /**
     * <code>MessageType_CosiCommit = 71 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CosiCommit(71),
    /**
     * <code>MessageType_CosiCommitment = 72 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CosiCommitment(72),
    /**
     * <code>MessageType_CosiSign = 73 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CosiSign(73),
    /**
     * <code>MessageType_CosiSignature = 74 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CosiSignature(74),
    /**
     * <pre>
     * Debug
     * </pre>
     *
     * <code>MessageType_DebugLinkDecision = 100 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    MessageType_DebugLinkDecision(100),
    /**
     * <code>MessageType_DebugLinkGetState = 101 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    MessageType_DebugLinkGetState(101),
    /**
     * <code>MessageType_DebugLinkState = 102 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    MessageType_DebugLinkState(102),
    /**
     * <code>MessageType_DebugLinkStop = 103 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    MessageType_DebugLinkStop(103),
    /**
     * <code>MessageType_DebugLinkLog = 104 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    MessageType_DebugLinkLog(104),
    /**
     * <code>MessageType_DebugLinkMemoryRead = 110 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    MessageType_DebugLinkMemoryRead(110),
    /**
     * <code>MessageType_DebugLinkMemory = 111 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    MessageType_DebugLinkMemory(111),
    /**
     * <code>MessageType_DebugLinkMemoryWrite = 112 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    MessageType_DebugLinkMemoryWrite(112),
    /**
     * <code>MessageType_DebugLinkFlashErase = 113 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    MessageType_DebugLinkFlashErase(113),
    /**
     * <pre>
     * Ethereum
     * </pre>
     *
     * <code>MessageType_EthereumGetPublicKey = 450 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumGetPublicKey(450),
    /**
     * <code>MessageType_EthereumPublicKey = 451 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumPublicKey(451),
    /**
     * <code>MessageType_EthereumGetAddress = 56 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumGetAddress(56),
    /**
     * <code>MessageType_EthereumAddress = 57 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumAddress(57),
    /**
     * <code>MessageType_EthereumSignTx = 58 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignTx(58),
    /**
     * <code>MessageType_EthereumTxRequest = 59 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumTxRequest(59),
    /**
     * <code>MessageType_EthereumTxAck = 60 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumTxAck(60),
    /**
     * <code>MessageType_EthereumSignMessage = 64 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumSignMessage(64),
    /**
     * <code>MessageType_EthereumVerifyMessage = 65 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EthereumVerifyMessage(65),
    /**
     * <code>MessageType_EthereumMessageSignature = 66 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EthereumMessageSignature(66),
    /**
     * <pre>
     * NEM
     * </pre>
     *
     * <code>MessageType_NEMGetAddress = 67 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMGetAddress(67),
    /**
     * <code>MessageType_NEMAddress = 68 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMAddress(68),
    /**
     * <code>MessageType_NEMSignTx = 69 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMSignTx(69),
    /**
     * <code>MessageType_NEMSignedTx = 70 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMSignedTx(70),
    /**
     * <code>MessageType_NEMDecryptMessage = 75 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_NEMDecryptMessage(75),
    /**
     * <code>MessageType_NEMDecryptedMessage = 76 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_NEMDecryptedMessage(76),
    /**
     * <pre>
     * Lisk
     * </pre>
     *
     * <code>MessageType_LiskGetAddress = 114 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LiskGetAddress(114),
    /**
     * <code>MessageType_LiskAddress = 115 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_LiskAddress(115),
    /**
     * <code>MessageType_LiskSignTx = 116 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LiskSignTx(116),
    /**
     * <code>MessageType_LiskSignedTx = 117 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_LiskSignedTx(117),
    /**
     * <code>MessageType_LiskSignMessage = 118 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LiskSignMessage(118),
    /**
     * <code>MessageType_LiskMessageSignature = 119 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_LiskMessageSignature(119),
    /**
     * <code>MessageType_LiskVerifyMessage = 120 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LiskVerifyMessage(120),
    /**
     * <code>MessageType_LiskGetPublicKey = 121 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_LiskGetPublicKey(121),
    /**
     * <code>MessageType_LiskPublicKey = 122 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_LiskPublicKey(122),
    /**
     * <pre>
     * Tezos
     * </pre>
     *
     * <code>MessageType_TezosGetAddress = 150 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosGetAddress(150),
    /**
     * <code>MessageType_TezosAddress = 151 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosAddress(151),
    /**
     * <code>MessageType_TezosSignTx = 152 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosSignTx(152),
    /**
     * <code>MessageType_TezosSignedTx = 153 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosSignedTx(153),
    /**
     * <code>MessageType_TezosGetPublicKey = 154 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TezosGetPublicKey(154),
    /**
     * <code>MessageType_TezosPublicKey = 155 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TezosPublicKey(155),
    /**
     * <pre>
     * Stellar
     * </pre>
     *
     * <code>MessageType_StellarSignTx = 202 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarSignTx(202),
    /**
     * <code>MessageType_StellarTxOpRequest = 203 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarTxOpRequest(203),
    /**
     * <code>MessageType_StellarGetAddress = 207 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarGetAddress(207),
    /**
     * <code>MessageType_StellarAddress = 208 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarAddress(208),
    /**
     * <code>MessageType_StellarCreateAccountOp = 210 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarCreateAccountOp(210),
    /**
     * <code>MessageType_StellarPaymentOp = 211 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarPaymentOp(211),
    /**
     * <code>MessageType_StellarPathPaymentOp = 212 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarPathPaymentOp(212),
    /**
     * <code>MessageType_StellarManageOfferOp = 213 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarManageOfferOp(213),
    /**
     * <code>MessageType_StellarCreatePassiveOfferOp = 214 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarCreatePassiveOfferOp(214),
    /**
     * <code>MessageType_StellarSetOptionsOp = 215 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarSetOptionsOp(215),
    /**
     * <code>MessageType_StellarChangeTrustOp = 216 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarChangeTrustOp(216),
    /**
     * <code>MessageType_StellarAllowTrustOp = 217 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarAllowTrustOp(217),
    /**
     * <code>MessageType_StellarAccountMergeOp = 218 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarAccountMergeOp(218),
    /**
     * <pre>
     * omitted: StellarInflationOp is not a supported operation, would be 219
     * </pre>
     *
     * <code>MessageType_StellarManageDataOp = 220 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarManageDataOp(220),
    /**
     * <code>MessageType_StellarBumpSequenceOp = 221 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_StellarBumpSequenceOp(221),
    /**
     * <code>MessageType_StellarSignedTx = 230 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_StellarSignedTx(230),
    /**
     * <pre>
     * TRON
     * </pre>
     *
     * <code>MessageType_TronGetAddress = 250 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TronGetAddress(250),
    /**
     * <code>MessageType_TronAddress = 251 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TronAddress(251),
    /**
     * <code>MessageType_TronSignTx = 252 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_TronSignTx(252),
    /**
     * <code>MessageType_TronSignedTx = 253 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_TronSignedTx(253),
    /**
     * <pre>
     * Cardano
     * dropped Sign/VerifyMessage ids 300-302
     * </pre>
     *
     * <code>MessageType_CardanoSignTx = 303 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoSignTx(303),
    /**
     * <code>MessageType_CardanoTxRequest = 304 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoTxRequest(304),
    /**
     * <code>MessageType_CardanoGetPublicKey = 305 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoGetPublicKey(305),
    /**
     * <code>MessageType_CardanoPublicKey = 306 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoPublicKey(306),
    /**
     * <code>MessageType_CardanoGetAddress = 307 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoGetAddress(307),
    /**
     * <code>MessageType_CardanoAddress = 308 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoAddress(308),
    /**
     * <code>MessageType_CardanoTxAck = 309 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_CardanoTxAck(309),
    /**
     * <code>MessageType_CardanoSignedTx = 310 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_CardanoSignedTx(310),
    /**
     * <pre>
     * Ontology
     * </pre>
     *
     * <code>MessageType_OntologyGetAddress = 350 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologyGetAddress(350),
    /**
     * <code>MessageType_OntologyAddress = 351 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologyAddress(351),
    /**
     * <code>MessageType_OntologyGetPublicKey = 352 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologyGetPublicKey(352),
    /**
     * <code>MessageType_OntologyPublicKey = 353 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologyPublicKey(353),
    /**
     * <code>MessageType_OntologySignTransfer = 354 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologySignTransfer(354),
    /**
     * <code>MessageType_OntologySignedTransfer = 355 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologySignedTransfer(355),
    /**
     * <code>MessageType_OntologySignWithdrawOng = 356 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologySignWithdrawOng(356),
    /**
     * <code>MessageType_OntologySignedWithdrawOng = 357 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologySignedWithdrawOng(357),
    /**
     * <code>MessageType_OntologySignOntIdRegister = 358 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologySignOntIdRegister(358),
    /**
     * <code>MessageType_OntologySignedOntIdRegister = 359 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologySignedOntIdRegister(359),
    /**
     * <code>MessageType_OntologySignOntIdAddAttributes = 360 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_OntologySignOntIdAddAttributes(360),
    /**
     * <code>MessageType_OntologySignedOntIdAddAttributes = 361 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_OntologySignedOntIdAddAttributes(361),
    /**
     * <pre>
     * Ripple
     * </pre>
     *
     * <code>MessageType_RippleGetAddress = 400 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleGetAddress(400),
    /**
     * <code>MessageType_RippleAddress = 401 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_RippleAddress(401),
    /**
     * <code>MessageType_RippleSignTx = 402 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleSignTx(402),
    /**
     * <code>MessageType_RippleSignedTx = 403 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_RippleSignedTx(403),
    /**
     * <pre>
     * Monero
     * </pre>
     *
     * <code>MessageType_MoneroTransactionInitRequest = 501 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInitRequest(501),
    /**
     * <code>MessageType_MoneroTransactionInitAck = 502 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInitAck(502),
    /**
     * <code>MessageType_MoneroTransactionSetInputRequest = 503 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetInputRequest(503),
    /**
     * <code>MessageType_MoneroTransactionSetInputAck = 504 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetInputAck(504),
    /**
     * <code>MessageType_MoneroTransactionInputsPermutationRequest = 505 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputsPermutationRequest(505),
    /**
     * <code>MessageType_MoneroTransactionInputsPermutationAck = 506 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputsPermutationAck(506),
    /**
     * <code>MessageType_MoneroTransactionInputViniRequest = 507 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputViniRequest(507),
    /**
     * <code>MessageType_MoneroTransactionInputViniAck = 508 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionInputViniAck(508),
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetRequest = 509 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllInputsSetRequest(509),
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetAck = 510 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllInputsSetAck(510),
    /**
     * <code>MessageType_MoneroTransactionSetOutputRequest = 511 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetOutputRequest(511),
    /**
     * <code>MessageType_MoneroTransactionSetOutputAck = 512 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSetOutputAck(512),
    /**
     * <code>MessageType_MoneroTransactionAllOutSetRequest = 513 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllOutSetRequest(513),
    /**
     * <code>MessageType_MoneroTransactionAllOutSetAck = 514 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionAllOutSetAck(514),
    /**
     * <code>MessageType_MoneroTransactionSignInputRequest = 515 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSignInputRequest(515),
    /**
     * <code>MessageType_MoneroTransactionSignInputAck = 516 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionSignInputAck(516),
    /**
     * <code>MessageType_MoneroTransactionFinalRequest = 517 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionFinalRequest(517),
    /**
     * <code>MessageType_MoneroTransactionFinalAck = 518 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroTransactionFinalAck(518),
    /**
     * <code>MessageType_MoneroKeyImageExportInitRequest = 530 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageExportInitRequest(530),
    /**
     * <code>MessageType_MoneroKeyImageExportInitAck = 531 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageExportInitAck(531),
    /**
     * <code>MessageType_MoneroKeyImageSyncStepRequest = 532 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncStepRequest(532),
    /**
     * <code>MessageType_MoneroKeyImageSyncStepAck = 533 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncStepAck(533),
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalRequest = 534 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncFinalRequest(534),
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalAck = 535 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroKeyImageSyncFinalAck(535),
    /**
     * <code>MessageType_MoneroGetAddress = 540 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetAddress(540),
    /**
     * <code>MessageType_MoneroAddress = 541 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroAddress(541),
    /**
     * <code>MessageType_MoneroGetWatchKey = 542 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetWatchKey(542),
    /**
     * <code>MessageType_MoneroWatchKey = 543 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroWatchKey(543),
    /**
     * <code>MessageType_DebugMoneroDiagRequest = 546 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_DebugMoneroDiagRequest(546),
    /**
     * <code>MessageType_DebugMoneroDiagAck = 547 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_DebugMoneroDiagAck(547),
    /**
     * <code>MessageType_MoneroGetTxKeyRequest = 550 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroGetTxKeyRequest(550),
    /**
     * <code>MessageType_MoneroGetTxKeyAck = 551 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroGetTxKeyAck(551),
    /**
     * <code>MessageType_MoneroLiveRefreshStartRequest = 552 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshStartRequest(552),
    /**
     * <code>MessageType_MoneroLiveRefreshStartAck = 553 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshStartAck(553),
    /**
     * <code>MessageType_MoneroLiveRefreshStepRequest = 554 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshStepRequest(554),
    /**
     * <code>MessageType_MoneroLiveRefreshStepAck = 555 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshStepAck(555),
    /**
     * <code>MessageType_MoneroLiveRefreshFinalRequest = 556 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_MoneroLiveRefreshFinalRequest(556),
    /**
     * <code>MessageType_MoneroLiveRefreshFinalAck = 557 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_MoneroLiveRefreshFinalAck(557),
    /**
     * <pre>
     * EOS
     * </pre>
     *
     * <code>MessageType_EosGetPublicKey = 600 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosGetPublicKey(600),
    /**
     * <code>MessageType_EosPublicKey = 601 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosPublicKey(601),
    /**
     * <code>MessageType_EosSignTx = 602 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosSignTx(602),
    /**
     * <code>MessageType_EosTxActionRequest = 603 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosTxActionRequest(603),
    /**
     * <code>MessageType_EosTxActionAck = 604 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    MessageType_EosTxActionAck(604),
    /**
     * <code>MessageType_EosSignedTx = 605 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    MessageType_EosSignedTx(605),
    ;

    /**
     * <pre>
     * Management
     * </pre>
     *
     * <code>MessageType_Initialize = 0 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    public static final int MessageType_Initialize_VALUE = 0;
    /**
     * <code>MessageType_Ping = 1 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_Ping_VALUE = 1;
    /**
     * <code>MessageType_Success = 2 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_Success_VALUE = 2;
    /**
     * <code>MessageType_Failure = 3 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_Failure_VALUE = 3;
    /**
     * <code>MessageType_ChangePin = 4 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_ChangePin_VALUE = 4;
    /**
     * <code>MessageType_WipeDevice = 5 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_WipeDevice_VALUE = 5;
    /**
     * <code>MessageType_GetEntropy = 9 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetEntropy_VALUE = 9;
    /**
     * <code>MessageType_Entropy = 10 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_Entropy_VALUE = 10;
    /**
     * <code>MessageType_LoadDevice = 13 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LoadDevice_VALUE = 13;
    /**
     * <code>MessageType_ResetDevice = 14 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_ResetDevice_VALUE = 14;
    /**
     * <code>MessageType_Features = 17 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_Features_VALUE = 17;
    /**
     * <code>MessageType_PinMatrixRequest = 18 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_PinMatrixRequest_VALUE = 18;
    /**
     * <code>MessageType_PinMatrixAck = 19 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    public static final int MessageType_PinMatrixAck_VALUE = 19;
    /**
     * <code>MessageType_Cancel = 20 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    public static final int MessageType_Cancel_VALUE = 20;
    /**
     * <code>MessageType_ClearSession = 24 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_ClearSession_VALUE = 24;
    /**
     * <code>MessageType_ApplySettings = 25 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_ApplySettings_VALUE = 25;
    /**
     * <code>MessageType_ButtonRequest = 26 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_ButtonRequest_VALUE = 26;
    /**
     * <code>MessageType_ButtonAck = 27 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    public static final int MessageType_ButtonAck_VALUE = 27;
    /**
     * <code>MessageType_ApplyFlags = 28 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_ApplyFlags_VALUE = 28;
    /**
     * <code>MessageType_BackupDevice = 34 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_BackupDevice_VALUE = 34;
    /**
     * <code>MessageType_EntropyRequest = 35 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EntropyRequest_VALUE = 35;
    /**
     * <code>MessageType_EntropyAck = 36 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EntropyAck_VALUE = 36;
    /**
     * <code>MessageType_PassphraseRequest = 41 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_PassphraseRequest_VALUE = 41;
    /**
     * <code>MessageType_PassphraseAck = 42 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    public static final int MessageType_PassphraseAck_VALUE = 42;
    /**
     * <code>MessageType_PassphraseStateRequest = 77 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_PassphraseStateRequest_VALUE = 77;
    /**
     * <code>MessageType_PassphraseStateAck = 78 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    public static final int MessageType_PassphraseStateAck_VALUE = 78;
    /**
     * <code>MessageType_RecoveryDevice = 45 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RecoveryDevice_VALUE = 45;
    /**
     * <code>MessageType_WordRequest = 46 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_WordRequest_VALUE = 46;
    /**
     * <code>MessageType_WordAck = 47 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_WordAck_VALUE = 47;
    /**
     * <code>MessageType_GetFeatures = 55 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetFeatures_VALUE = 55;
    /**
     * <code>MessageType_SetU2FCounter = 63 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SetU2FCounter_VALUE = 63;
    /**
     * <pre>
     * Bootloader
     * </pre>
     *
     * <code>MessageType_FirmwareErase = 6 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    public static final int MessageType_FirmwareErase_VALUE = 6;
    /**
     * <code>MessageType_FirmwareUpload = 7 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    public static final int MessageType_FirmwareUpload_VALUE = 7;
    /**
     * <code>MessageType_FirmwareRequest = 8 [(.hw.trezor.messages.wire_out) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    public static final int MessageType_FirmwareRequest_VALUE = 8;
    /**
     * <code>MessageType_SelfTest = 32 [(.hw.trezor.messages.wire_in) = true, (.hw.trezor.messages.wire_bootloader) = true];</code>
     */
    public static final int MessageType_SelfTest_VALUE = 32;
    /**
     * <pre>
     * Bitcoin
     * </pre>
     *
     * <code>MessageType_GetPublicKey = 11 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetPublicKey_VALUE = 11;
    /**
     * <code>MessageType_PublicKey = 12 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_PublicKey_VALUE = 12;
    /**
     * <code>MessageType_SignTx = 15 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SignTx_VALUE = 15;
    /**
     * <code>MessageType_TxRequest = 21 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TxRequest_VALUE = 21;
    /**
     * <code>MessageType_TxAck = 22 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TxAck_VALUE = 22;
    /**
     * <code>MessageType_GetAddress = 29 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetAddress_VALUE = 29;
    /**
     * <code>MessageType_Address = 30 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_Address_VALUE = 30;
    /**
     * <code>MessageType_SignMessage = 38 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SignMessage_VALUE = 38;
    /**
     * <code>MessageType_VerifyMessage = 39 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_VerifyMessage_VALUE = 39;
    /**
     * <code>MessageType_MessageSignature = 40 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MessageSignature_VALUE = 40;
    /**
     * <pre>
     * Crypto
     * </pre>
     *
     * <code>MessageType_CipherKeyValue = 23 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CipherKeyValue_VALUE = 23;
    /**
     * <code>MessageType_CipheredKeyValue = 48 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CipheredKeyValue_VALUE = 48;
    /**
     * <code>MessageType_SignIdentity = 53 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_SignIdentity_VALUE = 53;
    /**
     * <code>MessageType_SignedIdentity = 54 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_SignedIdentity_VALUE = 54;
    /**
     * <code>MessageType_GetECDHSessionKey = 61 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_GetECDHSessionKey_VALUE = 61;
    /**
     * <code>MessageType_ECDHSessionKey = 62 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_ECDHSessionKey_VALUE = 62;
    /**
     * <code>MessageType_CosiCommit = 71 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CosiCommit_VALUE = 71;
    /**
     * <code>MessageType_CosiCommitment = 72 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CosiCommitment_VALUE = 72;
    /**
     * <code>MessageType_CosiSign = 73 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CosiSign_VALUE = 73;
    /**
     * <code>MessageType_CosiSignature = 74 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CosiSignature_VALUE = 74;
    /**
     * <pre>
     * Debug
     * </pre>
     *
     * <code>MessageType_DebugLinkDecision = 100 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true, (.hw.trezor.messages.wire_no_fsm) = true];</code>
     */
    public static final int MessageType_DebugLinkDecision_VALUE = 100;
    /**
     * <code>MessageType_DebugLinkGetState = 101 [(.hw.trezor.messages.wire_debug_in) = true, (.hw.trezor.messages.wire_tiny) = true];</code>
     */
    public static final int MessageType_DebugLinkGetState_VALUE = 101;
    /**
     * <code>MessageType_DebugLinkState = 102 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    public static final int MessageType_DebugLinkState_VALUE = 102;
    /**
     * <code>MessageType_DebugLinkStop = 103 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    public static final int MessageType_DebugLinkStop_VALUE = 103;
    /**
     * <code>MessageType_DebugLinkLog = 104 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    public static final int MessageType_DebugLinkLog_VALUE = 104;
    /**
     * <code>MessageType_DebugLinkMemoryRead = 110 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    public static final int MessageType_DebugLinkMemoryRead_VALUE = 110;
    /**
     * <code>MessageType_DebugLinkMemory = 111 [(.hw.trezor.messages.wire_debug_out) = true];</code>
     */
    public static final int MessageType_DebugLinkMemory_VALUE = 111;
    /**
     * <code>MessageType_DebugLinkMemoryWrite = 112 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    public static final int MessageType_DebugLinkMemoryWrite_VALUE = 112;
    /**
     * <code>MessageType_DebugLinkFlashErase = 113 [(.hw.trezor.messages.wire_debug_in) = true];</code>
     */
    public static final int MessageType_DebugLinkFlashErase_VALUE = 113;
    /**
     * <pre>
     * Ethereum
     * </pre>
     *
     * <code>MessageType_EthereumGetPublicKey = 450 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumGetPublicKey_VALUE = 450;
    /**
     * <code>MessageType_EthereumPublicKey = 451 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumPublicKey_VALUE = 451;
    /**
     * <code>MessageType_EthereumGetAddress = 56 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumGetAddress_VALUE = 56;
    /**
     * <code>MessageType_EthereumAddress = 57 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumAddress_VALUE = 57;
    /**
     * <code>MessageType_EthereumSignTx = 58 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignTx_VALUE = 58;
    /**
     * <code>MessageType_EthereumTxRequest = 59 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumTxRequest_VALUE = 59;
    /**
     * <code>MessageType_EthereumTxAck = 60 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumTxAck_VALUE = 60;
    /**
     * <code>MessageType_EthereumSignMessage = 64 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumSignMessage_VALUE = 64;
    /**
     * <code>MessageType_EthereumVerifyMessage = 65 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EthereumVerifyMessage_VALUE = 65;
    /**
     * <code>MessageType_EthereumMessageSignature = 66 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EthereumMessageSignature_VALUE = 66;
    /**
     * <pre>
     * NEM
     * </pre>
     *
     * <code>MessageType_NEMGetAddress = 67 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMGetAddress_VALUE = 67;
    /**
     * <code>MessageType_NEMAddress = 68 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMAddress_VALUE = 68;
    /**
     * <code>MessageType_NEMSignTx = 69 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMSignTx_VALUE = 69;
    /**
     * <code>MessageType_NEMSignedTx = 70 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMSignedTx_VALUE = 70;
    /**
     * <code>MessageType_NEMDecryptMessage = 75 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_NEMDecryptMessage_VALUE = 75;
    /**
     * <code>MessageType_NEMDecryptedMessage = 76 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_NEMDecryptedMessage_VALUE = 76;
    /**
     * <pre>
     * Lisk
     * </pre>
     *
     * <code>MessageType_LiskGetAddress = 114 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LiskGetAddress_VALUE = 114;
    /**
     * <code>MessageType_LiskAddress = 115 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_LiskAddress_VALUE = 115;
    /**
     * <code>MessageType_LiskSignTx = 116 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LiskSignTx_VALUE = 116;
    /**
     * <code>MessageType_LiskSignedTx = 117 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_LiskSignedTx_VALUE = 117;
    /**
     * <code>MessageType_LiskSignMessage = 118 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LiskSignMessage_VALUE = 118;
    /**
     * <code>MessageType_LiskMessageSignature = 119 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_LiskMessageSignature_VALUE = 119;
    /**
     * <code>MessageType_LiskVerifyMessage = 120 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LiskVerifyMessage_VALUE = 120;
    /**
     * <code>MessageType_LiskGetPublicKey = 121 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_LiskGetPublicKey_VALUE = 121;
    /**
     * <code>MessageType_LiskPublicKey = 122 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_LiskPublicKey_VALUE = 122;
    /**
     * <pre>
     * Tezos
     * </pre>
     *
     * <code>MessageType_TezosGetAddress = 150 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosGetAddress_VALUE = 150;
    /**
     * <code>MessageType_TezosAddress = 151 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosAddress_VALUE = 151;
    /**
     * <code>MessageType_TezosSignTx = 152 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosSignTx_VALUE = 152;
    /**
     * <code>MessageType_TezosSignedTx = 153 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosSignedTx_VALUE = 153;
    /**
     * <code>MessageType_TezosGetPublicKey = 154 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TezosGetPublicKey_VALUE = 154;
    /**
     * <code>MessageType_TezosPublicKey = 155 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TezosPublicKey_VALUE = 155;
    /**
     * <pre>
     * Stellar
     * </pre>
     *
     * <code>MessageType_StellarSignTx = 202 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarSignTx_VALUE = 202;
    /**
     * <code>MessageType_StellarTxOpRequest = 203 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarTxOpRequest_VALUE = 203;
    /**
     * <code>MessageType_StellarGetAddress = 207 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarGetAddress_VALUE = 207;
    /**
     * <code>MessageType_StellarAddress = 208 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarAddress_VALUE = 208;
    /**
     * <code>MessageType_StellarCreateAccountOp = 210 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarCreateAccountOp_VALUE = 210;
    /**
     * <code>MessageType_StellarPaymentOp = 211 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarPaymentOp_VALUE = 211;
    /**
     * <code>MessageType_StellarPathPaymentOp = 212 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarPathPaymentOp_VALUE = 212;
    /**
     * <code>MessageType_StellarManageOfferOp = 213 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarManageOfferOp_VALUE = 213;
    /**
     * <code>MessageType_StellarCreatePassiveOfferOp = 214 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarCreatePassiveOfferOp_VALUE = 214;
    /**
     * <code>MessageType_StellarSetOptionsOp = 215 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarSetOptionsOp_VALUE = 215;
    /**
     * <code>MessageType_StellarChangeTrustOp = 216 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarChangeTrustOp_VALUE = 216;
    /**
     * <code>MessageType_StellarAllowTrustOp = 217 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarAllowTrustOp_VALUE = 217;
    /**
     * <code>MessageType_StellarAccountMergeOp = 218 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarAccountMergeOp_VALUE = 218;
    /**
     * <pre>
     * omitted: StellarInflationOp is not a supported operation, would be 219
     * </pre>
     *
     * <code>MessageType_StellarManageDataOp = 220 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarManageDataOp_VALUE = 220;
    /**
     * <code>MessageType_StellarBumpSequenceOp = 221 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_StellarBumpSequenceOp_VALUE = 221;
    /**
     * <code>MessageType_StellarSignedTx = 230 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_StellarSignedTx_VALUE = 230;
    /**
     * <pre>
     * TRON
     * </pre>
     *
     * <code>MessageType_TronGetAddress = 250 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TronGetAddress_VALUE = 250;
    /**
     * <code>MessageType_TronAddress = 251 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TronAddress_VALUE = 251;
    /**
     * <code>MessageType_TronSignTx = 252 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_TronSignTx_VALUE = 252;
    /**
     * <code>MessageType_TronSignedTx = 253 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_TronSignedTx_VALUE = 253;
    /**
     * <pre>
     * Cardano
     * dropped Sign/VerifyMessage ids 300-302
     * </pre>
     *
     * <code>MessageType_CardanoSignTx = 303 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoSignTx_VALUE = 303;
    /**
     * <code>MessageType_CardanoTxRequest = 304 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoTxRequest_VALUE = 304;
    /**
     * <code>MessageType_CardanoGetPublicKey = 305 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoGetPublicKey_VALUE = 305;
    /**
     * <code>MessageType_CardanoPublicKey = 306 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoPublicKey_VALUE = 306;
    /**
     * <code>MessageType_CardanoGetAddress = 307 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoGetAddress_VALUE = 307;
    /**
     * <code>MessageType_CardanoAddress = 308 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoAddress_VALUE = 308;
    /**
     * <code>MessageType_CardanoTxAck = 309 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_CardanoTxAck_VALUE = 309;
    /**
     * <code>MessageType_CardanoSignedTx = 310 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_CardanoSignedTx_VALUE = 310;
    /**
     * <pre>
     * Ontology
     * </pre>
     *
     * <code>MessageType_OntologyGetAddress = 350 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologyGetAddress_VALUE = 350;
    /**
     * <code>MessageType_OntologyAddress = 351 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologyAddress_VALUE = 351;
    /**
     * <code>MessageType_OntologyGetPublicKey = 352 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologyGetPublicKey_VALUE = 352;
    /**
     * <code>MessageType_OntologyPublicKey = 353 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologyPublicKey_VALUE = 353;
    /**
     * <code>MessageType_OntologySignTransfer = 354 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologySignTransfer_VALUE = 354;
    /**
     * <code>MessageType_OntologySignedTransfer = 355 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologySignedTransfer_VALUE = 355;
    /**
     * <code>MessageType_OntologySignWithdrawOng = 356 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologySignWithdrawOng_VALUE = 356;
    /**
     * <code>MessageType_OntologySignedWithdrawOng = 357 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologySignedWithdrawOng_VALUE = 357;
    /**
     * <code>MessageType_OntologySignOntIdRegister = 358 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologySignOntIdRegister_VALUE = 358;
    /**
     * <code>MessageType_OntologySignedOntIdRegister = 359 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologySignedOntIdRegister_VALUE = 359;
    /**
     * <code>MessageType_OntologySignOntIdAddAttributes = 360 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_OntologySignOntIdAddAttributes_VALUE = 360;
    /**
     * <code>MessageType_OntologySignedOntIdAddAttributes = 361 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_OntologySignedOntIdAddAttributes_VALUE = 361;
    /**
     * <pre>
     * Ripple
     * </pre>
     *
     * <code>MessageType_RippleGetAddress = 400 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleGetAddress_VALUE = 400;
    /**
     * <code>MessageType_RippleAddress = 401 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_RippleAddress_VALUE = 401;
    /**
     * <code>MessageType_RippleSignTx = 402 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleSignTx_VALUE = 402;
    /**
     * <code>MessageType_RippleSignedTx = 403 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_RippleSignedTx_VALUE = 403;
    /**
     * <pre>
     * Monero
     * </pre>
     *
     * <code>MessageType_MoneroTransactionInitRequest = 501 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInitRequest_VALUE = 501;
    /**
     * <code>MessageType_MoneroTransactionInitAck = 502 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInitAck_VALUE = 502;
    /**
     * <code>MessageType_MoneroTransactionSetInputRequest = 503 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetInputRequest_VALUE = 503;
    /**
     * <code>MessageType_MoneroTransactionSetInputAck = 504 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetInputAck_VALUE = 504;
    /**
     * <code>MessageType_MoneroTransactionInputsPermutationRequest = 505 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputsPermutationRequest_VALUE = 505;
    /**
     * <code>MessageType_MoneroTransactionInputsPermutationAck = 506 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputsPermutationAck_VALUE = 506;
    /**
     * <code>MessageType_MoneroTransactionInputViniRequest = 507 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputViniRequest_VALUE = 507;
    /**
     * <code>MessageType_MoneroTransactionInputViniAck = 508 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionInputViniAck_VALUE = 508;
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetRequest = 509 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllInputsSetRequest_VALUE = 509;
    /**
     * <code>MessageType_MoneroTransactionAllInputsSetAck = 510 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllInputsSetAck_VALUE = 510;
    /**
     * <code>MessageType_MoneroTransactionSetOutputRequest = 511 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetOutputRequest_VALUE = 511;
    /**
     * <code>MessageType_MoneroTransactionSetOutputAck = 512 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSetOutputAck_VALUE = 512;
    /**
     * <code>MessageType_MoneroTransactionAllOutSetRequest = 513 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllOutSetRequest_VALUE = 513;
    /**
     * <code>MessageType_MoneroTransactionAllOutSetAck = 514 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionAllOutSetAck_VALUE = 514;
    /**
     * <code>MessageType_MoneroTransactionSignInputRequest = 515 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSignInputRequest_VALUE = 515;
    /**
     * <code>MessageType_MoneroTransactionSignInputAck = 516 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionSignInputAck_VALUE = 516;
    /**
     * <code>MessageType_MoneroTransactionFinalRequest = 517 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionFinalRequest_VALUE = 517;
    /**
     * <code>MessageType_MoneroTransactionFinalAck = 518 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroTransactionFinalAck_VALUE = 518;
    /**
     * <code>MessageType_MoneroKeyImageExportInitRequest = 530 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageExportInitRequest_VALUE = 530;
    /**
     * <code>MessageType_MoneroKeyImageExportInitAck = 531 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageExportInitAck_VALUE = 531;
    /**
     * <code>MessageType_MoneroKeyImageSyncStepRequest = 532 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncStepRequest_VALUE = 532;
    /**
     * <code>MessageType_MoneroKeyImageSyncStepAck = 533 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncStepAck_VALUE = 533;
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalRequest = 534 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncFinalRequest_VALUE = 534;
    /**
     * <code>MessageType_MoneroKeyImageSyncFinalAck = 535 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroKeyImageSyncFinalAck_VALUE = 535;
    /**
     * <code>MessageType_MoneroGetAddress = 540 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetAddress_VALUE = 540;
    /**
     * <code>MessageType_MoneroAddress = 541 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroAddress_VALUE = 541;
    /**
     * <code>MessageType_MoneroGetWatchKey = 542 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetWatchKey_VALUE = 542;
    /**
     * <code>MessageType_MoneroWatchKey = 543 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroWatchKey_VALUE = 543;
    /**
     * <code>MessageType_DebugMoneroDiagRequest = 546 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_DebugMoneroDiagRequest_VALUE = 546;
    /**
     * <code>MessageType_DebugMoneroDiagAck = 547 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_DebugMoneroDiagAck_VALUE = 547;
    /**
     * <code>MessageType_MoneroGetTxKeyRequest = 550 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroGetTxKeyRequest_VALUE = 550;
    /**
     * <code>MessageType_MoneroGetTxKeyAck = 551 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroGetTxKeyAck_VALUE = 551;
    /**
     * <code>MessageType_MoneroLiveRefreshStartRequest = 552 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStartRequest_VALUE = 552;
    /**
     * <code>MessageType_MoneroLiveRefreshStartAck = 553 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStartAck_VALUE = 553;
    /**
     * <code>MessageType_MoneroLiveRefreshStepRequest = 554 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStepRequest_VALUE = 554;
    /**
     * <code>MessageType_MoneroLiveRefreshStepAck = 555 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshStepAck_VALUE = 555;
    /**
     * <code>MessageType_MoneroLiveRefreshFinalRequest = 556 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshFinalRequest_VALUE = 556;
    /**
     * <code>MessageType_MoneroLiveRefreshFinalAck = 557 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_MoneroLiveRefreshFinalAck_VALUE = 557;
    /**
     * <pre>
     * EOS
     * </pre>
     *
     * <code>MessageType_EosGetPublicKey = 600 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosGetPublicKey_VALUE = 600;
    /**
     * <code>MessageType_EosPublicKey = 601 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosPublicKey_VALUE = 601;
    /**
     * <code>MessageType_EosSignTx = 602 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosSignTx_VALUE = 602;
    /**
     * <code>MessageType_EosTxActionRequest = 603 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosTxActionRequest_VALUE = 603;
    /**
     * <code>MessageType_EosTxActionAck = 604 [(.hw.trezor.messages.wire_in) = true];</code>
     */
    public static final int MessageType_EosTxActionAck_VALUE = 604;
    /**
     * <code>MessageType_EosSignedTx = 605 [(.hw.trezor.messages.wire_out) = true];</code>
     */
    public static final int MessageType_EosSignedTx_VALUE = 605;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MessageType valueOf(int value) {
      return forNumber(value);
    }

    public static MessageType forNumber(int value) {
      switch (value) {
        case 0: return MessageType_Initialize;
        case 1: return MessageType_Ping;
        case 2: return MessageType_Success;
        case 3: return MessageType_Failure;
        case 4: return MessageType_ChangePin;
        case 5: return MessageType_WipeDevice;
        case 9: return MessageType_GetEntropy;
        case 10: return MessageType_Entropy;
        case 13: return MessageType_LoadDevice;
        case 14: return MessageType_ResetDevice;
        case 17: return MessageType_Features;
        case 18: return MessageType_PinMatrixRequest;
        case 19: return MessageType_PinMatrixAck;
        case 20: return MessageType_Cancel;
        case 24: return MessageType_ClearSession;
        case 25: return MessageType_ApplySettings;
        case 26: return MessageType_ButtonRequest;
        case 27: return MessageType_ButtonAck;
        case 28: return MessageType_ApplyFlags;
        case 34: return MessageType_BackupDevice;
        case 35: return MessageType_EntropyRequest;
        case 36: return MessageType_EntropyAck;
        case 41: return MessageType_PassphraseRequest;
        case 42: return MessageType_PassphraseAck;
        case 77: return MessageType_PassphraseStateRequest;
        case 78: return MessageType_PassphraseStateAck;
        case 45: return MessageType_RecoveryDevice;
        case 46: return MessageType_WordRequest;
        case 47: return MessageType_WordAck;
        case 55: return MessageType_GetFeatures;
        case 63: return MessageType_SetU2FCounter;
        case 6: return MessageType_FirmwareErase;
        case 7: return MessageType_FirmwareUpload;
        case 8: return MessageType_FirmwareRequest;
        case 32: return MessageType_SelfTest;
        case 11: return MessageType_GetPublicKey;
        case 12: return MessageType_PublicKey;
        case 15: return MessageType_SignTx;
        case 21: return MessageType_TxRequest;
        case 22: return MessageType_TxAck;
        case 29: return MessageType_GetAddress;
        case 30: return MessageType_Address;
        case 38: return MessageType_SignMessage;
        case 39: return MessageType_VerifyMessage;
        case 40: return MessageType_MessageSignature;
        case 23: return MessageType_CipherKeyValue;
        case 48: return MessageType_CipheredKeyValue;
        case 53: return MessageType_SignIdentity;
        case 54: return MessageType_SignedIdentity;
        case 61: return MessageType_GetECDHSessionKey;
        case 62: return MessageType_ECDHSessionKey;
        case 71: return MessageType_CosiCommit;
        case 72: return MessageType_CosiCommitment;
        case 73: return MessageType_CosiSign;
        case 74: return MessageType_CosiSignature;
        case 100: return MessageType_DebugLinkDecision;
        case 101: return MessageType_DebugLinkGetState;
        case 102: return MessageType_DebugLinkState;
        case 103: return MessageType_DebugLinkStop;
        case 104: return MessageType_DebugLinkLog;
        case 110: return MessageType_DebugLinkMemoryRead;
        case 111: return MessageType_DebugLinkMemory;
        case 112: return MessageType_DebugLinkMemoryWrite;
        case 113: return MessageType_DebugLinkFlashErase;
        case 450: return MessageType_EthereumGetPublicKey;
        case 451: return MessageType_EthereumPublicKey;
        case 56: return MessageType_EthereumGetAddress;
        case 57: return MessageType_EthereumAddress;
        case 58: return MessageType_EthereumSignTx;
        case 59: return MessageType_EthereumTxRequest;
        case 60: return MessageType_EthereumTxAck;
        case 64: return MessageType_EthereumSignMessage;
        case 65: return MessageType_EthereumVerifyMessage;
        case 66: return MessageType_EthereumMessageSignature;
        case 67: return MessageType_NEMGetAddress;
        case 68: return MessageType_NEMAddress;
        case 69: return MessageType_NEMSignTx;
        case 70: return MessageType_NEMSignedTx;
        case 75: return MessageType_NEMDecryptMessage;
        case 76: return MessageType_NEMDecryptedMessage;
        case 114: return MessageType_LiskGetAddress;
        case 115: return MessageType_LiskAddress;
        case 116: return MessageType_LiskSignTx;
        case 117: return MessageType_LiskSignedTx;
        case 118: return MessageType_LiskSignMessage;
        case 119: return MessageType_LiskMessageSignature;
        case 120: return MessageType_LiskVerifyMessage;
        case 121: return MessageType_LiskGetPublicKey;
        case 122: return MessageType_LiskPublicKey;
        case 150: return MessageType_TezosGetAddress;
        case 151: return MessageType_TezosAddress;
        case 152: return MessageType_TezosSignTx;
        case 153: return MessageType_TezosSignedTx;
        case 154: return MessageType_TezosGetPublicKey;
        case 155: return MessageType_TezosPublicKey;
        case 202: return MessageType_StellarSignTx;
        case 203: return MessageType_StellarTxOpRequest;
        case 207: return MessageType_StellarGetAddress;
        case 208: return MessageType_StellarAddress;
        case 210: return MessageType_StellarCreateAccountOp;
        case 211: return MessageType_StellarPaymentOp;
        case 212: return MessageType_StellarPathPaymentOp;
        case 213: return MessageType_StellarManageOfferOp;
        case 214: return MessageType_StellarCreatePassiveOfferOp;
        case 215: return MessageType_StellarSetOptionsOp;
        case 216: return MessageType_StellarChangeTrustOp;
        case 217: return MessageType_StellarAllowTrustOp;
        case 218: return MessageType_StellarAccountMergeOp;
        case 220: return MessageType_StellarManageDataOp;
        case 221: return MessageType_StellarBumpSequenceOp;
        case 230: return MessageType_StellarSignedTx;
        case 250: return MessageType_TronGetAddress;
        case 251: return MessageType_TronAddress;
        case 252: return MessageType_TronSignTx;
        case 253: return MessageType_TronSignedTx;
        case 303: return MessageType_CardanoSignTx;
        case 304: return MessageType_CardanoTxRequest;
        case 305: return MessageType_CardanoGetPublicKey;
        case 306: return MessageType_CardanoPublicKey;
        case 307: return MessageType_CardanoGetAddress;
        case 308: return MessageType_CardanoAddress;
        case 309: return MessageType_CardanoTxAck;
        case 310: return MessageType_CardanoSignedTx;
        case 350: return MessageType_OntologyGetAddress;
        case 351: return MessageType_OntologyAddress;
        case 352: return MessageType_OntologyGetPublicKey;
        case 353: return MessageType_OntologyPublicKey;
        case 354: return MessageType_OntologySignTransfer;
        case 355: return MessageType_OntologySignedTransfer;
        case 356: return MessageType_OntologySignWithdrawOng;
        case 357: return MessageType_OntologySignedWithdrawOng;
        case 358: return MessageType_OntologySignOntIdRegister;
        case 359: return MessageType_OntologySignedOntIdRegister;
        case 360: return MessageType_OntologySignOntIdAddAttributes;
        case 361: return MessageType_OntologySignedOntIdAddAttributes;
        case 400: return MessageType_RippleGetAddress;
        case 401: return MessageType_RippleAddress;
        case 402: return MessageType_RippleSignTx;
        case 403: return MessageType_RippleSignedTx;
        case 501: return MessageType_MoneroTransactionInitRequest;
        case 502: return MessageType_MoneroTransactionInitAck;
        case 503: return MessageType_MoneroTransactionSetInputRequest;
        case 504: return MessageType_MoneroTransactionSetInputAck;
        case 505: return MessageType_MoneroTransactionInputsPermutationRequest;
        case 506: return MessageType_MoneroTransactionInputsPermutationAck;
        case 507: return MessageType_MoneroTransactionInputViniRequest;
        case 508: return MessageType_MoneroTransactionInputViniAck;
        case 509: return MessageType_MoneroTransactionAllInputsSetRequest;
        case 510: return MessageType_MoneroTransactionAllInputsSetAck;
        case 511: return MessageType_MoneroTransactionSetOutputRequest;
        case 512: return MessageType_MoneroTransactionSetOutputAck;
        case 513: return MessageType_MoneroTransactionAllOutSetRequest;
        case 514: return MessageType_MoneroTransactionAllOutSetAck;
        case 515: return MessageType_MoneroTransactionSignInputRequest;
        case 516: return MessageType_MoneroTransactionSignInputAck;
        case 517: return MessageType_MoneroTransactionFinalRequest;
        case 518: return MessageType_MoneroTransactionFinalAck;
        case 530: return MessageType_MoneroKeyImageExportInitRequest;
        case 531: return MessageType_MoneroKeyImageExportInitAck;
        case 532: return MessageType_MoneroKeyImageSyncStepRequest;
        case 533: return MessageType_MoneroKeyImageSyncStepAck;
        case 534: return MessageType_MoneroKeyImageSyncFinalRequest;
        case 535: return MessageType_MoneroKeyImageSyncFinalAck;
        case 540: return MessageType_MoneroGetAddress;
        case 541: return MessageType_MoneroAddress;
        case 542: return MessageType_MoneroGetWatchKey;
        case 543: return MessageType_MoneroWatchKey;
        case 546: return MessageType_DebugMoneroDiagRequest;
        case 547: return MessageType_DebugMoneroDiagAck;
        case 550: return MessageType_MoneroGetTxKeyRequest;
        case 551: return MessageType_MoneroGetTxKeyAck;
        case 552: return MessageType_MoneroLiveRefreshStartRequest;
        case 553: return MessageType_MoneroLiveRefreshStartAck;
        case 554: return MessageType_MoneroLiveRefreshStepRequest;
        case 555: return MessageType_MoneroLiveRefreshStepAck;
        case 556: return MessageType_MoneroLiveRefreshFinalRequest;
        case 557: return MessageType_MoneroLiveRefreshFinalAck;
        case 600: return MessageType_EosGetPublicKey;
        case 601: return MessageType_EosPublicKey;
        case 602: return MessageType_EosSignTx;
        case 603: return MessageType_EosTxActionRequest;
        case 604: return MessageType_EosTxActionAck;
        case 605: return MessageType_EosSignedTx;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MessageType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
            public MessageType findValueByNumber(int number) {
              return MessageType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.satoshilabs.trezor.lib.protobuf.TrezorMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final MessageType[] VALUES = values();

    public static MessageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MessageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hw.trezor.messages.MessageType)
  }

  public static final int WIRE_IN_FIELD_NUMBER = 50002;
  /**
   * <pre>
   * message can be transmitted via wire from PC to TREZOR
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireIn = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_OUT_FIELD_NUMBER = 50003;
  /**
   * <pre>
   * message can be transmitted via wire from TREZOR to PC
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireOut = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_DEBUG_IN_FIELD_NUMBER = 50004;
  /**
   * <pre>
   * message can be transmitted via debug wire from PC to TREZOR
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireDebugIn = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_DEBUG_OUT_FIELD_NUMBER = 50005;
  /**
   * <pre>
   * message can be transmitted via debug wire from TREZOR to PC
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireDebugOut = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_TINY_FIELD_NUMBER = 50006;
  /**
   * <pre>
   * message is handled by TREZOR when the USB stack is in tiny mode
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireTiny = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_BOOTLOADER_FIELD_NUMBER = 50007;
  /**
   * <pre>
   * message is only handled by TREZOR Bootloader
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireBootloader = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int WIRE_NO_FSM_FIELD_NUMBER = 50008;
  /**
   * <pre>
   * message is not handled by TREZOR unless the USB stack is in tiny mode
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.Boolean> wireNoFsm = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016messages.proto\022\022hw.trezor.messages\032 go" +
      "ogle/protobuf/descriptor.proto*\240<\n\013Messa" +
      "geType\022$\n\026MessageType_Initialize\020\000\032\010\220\265\030\001" +
      "\260\265\030\001\022\032\n\020MessageType_Ping\020\001\032\004\220\265\030\001\022\035\n\023Mess" +
      "ageType_Success\020\002\032\004\230\265\030\001\022\035\n\023MessageType_F" +
      "ailure\020\003\032\004\230\265\030\001\022\037\n\025MessageType_ChangePin\020" +
      "\004\032\004\220\265\030\001\022 \n\026MessageType_WipeDevice\020\005\032\004\220\265\030" +
      "\001\022 \n\026MessageType_GetEntropy\020\t\032\004\220\265\030\001\022\035\n\023M" +
      "essageType_Entropy\020\n\032\004\230\265\030\001\022 \n\026MessageTyp" +
      "e_LoadDevice\020\r\032\004\220\265\030\001\022!\n\027MessageType_Rese" +
      "tDevice\020\016\032\004\220\265\030\001\022\036\n\024MessageType_Features\020" +
      "\021\032\004\230\265\030\001\022&\n\034MessageType_PinMatrixRequest\020" +
      "\022\032\004\230\265\030\001\022*\n\030MessageType_PinMatrixAck\020\023\032\014\220" +
      "\265\030\001\260\265\030\001\300\265\030\001\022 \n\022MessageType_Cancel\020\024\032\010\220\265\030" +
      "\001\260\265\030\001\022\"\n\030MessageType_ClearSession\020\030\032\004\220\265\030" +
      "\001\022#\n\031MessageType_ApplySettings\020\031\032\004\220\265\030\001\022#" +
      "\n\031MessageType_ButtonRequest\020\032\032\004\230\265\030\001\022\'\n\025M" +
      "essageType_ButtonAck\020\033\032\014\220\265\030\001\260\265\030\001\300\265\030\001\022 \n\026" +
      "MessageType_ApplyFlags\020\034\032\004\220\265\030\001\022\"\n\030Messag" +
      "eType_BackupDevice\020\"\032\004\220\265\030\001\022$\n\032MessageTyp" +
      "e_EntropyRequest\020#\032\004\230\265\030\001\022 \n\026MessageType_" +
      "EntropyAck\020$\032\004\220\265\030\001\022\'\n\035MessageType_Passph" +
      "raseRequest\020)\032\004\230\265\030\001\022+\n\031MessageType_Passp" +
      "hraseAck\020*\032\014\220\265\030\001\260\265\030\001\300\265\030\001\022,\n\"MessageType_" +
      "PassphraseStateRequest\020M\032\004\230\265\030\001\0220\n\036Messag" +
      "eType_PassphraseStateAck\020N\032\014\220\265\030\001\260\265\030\001\300\265\030\001" +
      "\022$\n\032MessageType_RecoveryDevice\020-\032\004\220\265\030\001\022!" +
      "\n\027MessageType_WordRequest\020.\032\004\230\265\030\001\022\035\n\023Mes" +
      "sageType_WordAck\020/\032\004\220\265\030\001\022!\n\027MessageType_" +
      "GetFeatures\0207\032\004\220\265\030\001\022#\n\031MessageType_SetU2" +
      "FCounter\020?\032\004\220\265\030\001\022\'\n\031MessageType_Firmware" +
      "Erase\020\006\032\010\220\265\030\001\270\265\030\001\022(\n\032MessageType_Firmwar" +
      "eUpload\020\007\032\010\220\265\030\001\270\265\030\001\022)\n\033MessageType_Firmw" +
      "areRequest\020\010\032\010\230\265\030\001\270\265\030\001\022\"\n\024MessageType_Se" +
      "lfTest\020 \032\010\220\265\030\001\270\265\030\001\022\"\n\030MessageType_GetPub" +
      "licKey\020\013\032\004\220\265\030\001\022\037\n\025MessageType_PublicKey\020" +
      "\014\032\004\230\265\030\001\022\034\n\022MessageType_SignTx\020\017\032\004\220\265\030\001\022\037\n" +
      "\025MessageType_TxRequest\020\025\032\004\230\265\030\001\022\033\n\021Messag" +
      "eType_TxAck\020\026\032\004\220\265\030\001\022 \n\026MessageType_GetAd" +
      "dress\020\035\032\004\220\265\030\001\022\035\n\023MessageType_Address\020\036\032\004" +
      "\230\265\030\001\022!\n\027MessageType_SignMessage\020&\032\004\220\265\030\001\022" +
      "#\n\031MessageType_VerifyMessage\020\'\032\004\220\265\030\001\022&\n\034" +
      "MessageType_MessageSignature\020(\032\004\230\265\030\001\022$\n\032" +
      "MessageType_CipherKeyValue\020\027\032\004\220\265\030\001\022&\n\034Me" +
      "ssageType_CipheredKeyValue\0200\032\004\230\265\030\001\022\"\n\030Me" +
      "ssageType_SignIdentity\0205\032\004\220\265\030\001\022$\n\032Messag" +
      "eType_SignedIdentity\0206\032\004\230\265\030\001\022\'\n\035MessageT" +
      "ype_GetECDHSessionKey\020=\032\004\220\265\030\001\022$\n\032Message" +
      "Type_ECDHSessionKey\020>\032\004\230\265\030\001\022 \n\026MessageTy" +
      "pe_CosiCommit\020G\032\004\220\265\030\001\022$\n\032MessageType_Cos" +
      "iCommitment\020H\032\004\230\265\030\001\022\036\n\024MessageType_CosiS" +
      "ign\020I\032\004\220\265\030\001\022#\n\031MessageType_CosiSignature" +
      "\020J\032\004\230\265\030\001\022/\n\035MessageType_DebugLinkDecisio" +
      "n\020d\032\014\240\265\030\001\260\265\030\001\300\265\030\001\022+\n\035MessageType_DebugLi" +
      "nkGetState\020e\032\010\240\265\030\001\260\265\030\001\022$\n\032MessageType_De" +
      "bugLinkState\020f\032\004\250\265\030\001\022#\n\031MessageType_Debu" +
      "gLinkStop\020g\032\004\240\265\030\001\022\"\n\030MessageType_DebugLi" +
      "nkLog\020h\032\004\250\265\030\001\022)\n\037MessageType_DebugLinkMe" +
      "moryRead\020n\032\004\240\265\030\001\022%\n\033MessageType_DebugLin" +
      "kMemory\020o\032\004\250\265\030\001\022*\n MessageType_DebugLink" +
      "MemoryWrite\020p\032\004\240\265\030\001\022)\n\037MessageType_Debug" +
      "LinkFlashErase\020q\032\004\240\265\030\001\022+\n MessageType_Et" +
      "hereumGetPublicKey\020\302\003\032\004\220\265\030\001\022(\n\035MessageTy" +
      "pe_EthereumPublicKey\020\303\003\032\004\230\265\030\001\022(\n\036Message" +
      "Type_EthereumGetAddress\0208\032\004\220\265\030\001\022%\n\033Messa" +
      "geType_EthereumAddress\0209\032\004\230\265\030\001\022$\n\032Messag" +
      "eType_EthereumSignTx\020:\032\004\220\265\030\001\022\'\n\035MessageT" +
      "ype_EthereumTxRequest\020;\032\004\230\265\030\001\022#\n\031Message" +
      "Type_EthereumTxAck\020<\032\004\220\265\030\001\022)\n\037MessageTyp" +
      "e_EthereumSignMessage\020@\032\004\220\265\030\001\022+\n!Message" +
      "Type_EthereumVerifyMessage\020A\032\004\220\265\030\001\022.\n$Me" +
      "ssageType_EthereumMessageSignature\020B\032\004\230\265" +
      "\030\001\022#\n\031MessageType_NEMGetAddress\020C\032\004\220\265\030\001\022" +
      " \n\026MessageType_NEMAddress\020D\032\004\230\265\030\001\022\037\n\025Mes" +
      "sageType_NEMSignTx\020E\032\004\220\265\030\001\022!\n\027MessageTyp" +
      "e_NEMSignedTx\020F\032\004\230\265\030\001\022\'\n\035MessageType_NEM" +
      "DecryptMessage\020K\032\004\220\265\030\001\022)\n\037MessageType_NE" +
      "MDecryptedMessage\020L\032\004\230\265\030\001\022$\n\032MessageType" +
      "_LiskGetAddress\020r\032\004\220\265\030\001\022!\n\027MessageType_L" +
      "iskAddress\020s\032\004\230\265\030\001\022 \n\026MessageType_LiskSi" +
      "gnTx\020t\032\004\220\265\030\001\022\"\n\030MessageType_LiskSignedTx" +
      "\020u\032\004\230\265\030\001\022%\n\033MessageType_LiskSignMessage\020" +
      "v\032\004\220\265\030\001\022*\n MessageType_LiskMessageSignat" +
      "ure\020w\032\004\230\265\030\001\022\'\n\035MessageType_LiskVerifyMes" +
      "sage\020x\032\004\220\265\030\001\022&\n\034MessageType_LiskGetPubli" +
      "cKey\020y\032\004\220\265\030\001\022#\n\031MessageType_LiskPublicKe" +
      "y\020z\032\004\230\265\030\001\022&\n\033MessageType_TezosGetAddress" +
      "\020\226\001\032\004\220\265\030\001\022#\n\030MessageType_TezosAddress\020\227\001" +
      "\032\004\230\265\030\001\022\"\n\027MessageType_TezosSignTx\020\230\001\032\004\220\265" +
      "\030\001\022$\n\031MessageType_TezosSignedTx\020\231\001\032\004\230\265\030\001" +
      "\022(\n\035MessageType_TezosGetPublicKey\020\232\001\032\004\220\265" +
      "\030\001\022%\n\032MessageType_TezosPublicKey\020\233\001\032\004\230\265\030" +
      "\001\022$\n\031MessageType_StellarSignTx\020\312\001\032\004\220\265\030\001\022" +
      ")\n\036MessageType_StellarTxOpRequest\020\313\001\032\004\230\265" +
      "\030\001\022(\n\035MessageType_StellarGetAddress\020\317\001\032\004" +
      "\220\265\030\001\022%\n\032MessageType_StellarAddress\020\320\001\032\004\230" +
      "\265\030\001\022-\n\"MessageType_StellarCreateAccountO" +
      "p\020\322\001\032\004\220\265\030\001\022\'\n\034MessageType_StellarPayment" +
      "Op\020\323\001\032\004\220\265\030\001\022+\n MessageType_StellarPathPa" +
      "ymentOp\020\324\001\032\004\220\265\030\001\022+\n MessageType_StellarM" +
      "anageOfferOp\020\325\001\032\004\220\265\030\001\0222\n\'MessageType_Ste" +
      "llarCreatePassiveOfferOp\020\326\001\032\004\220\265\030\001\022*\n\037Mes" +
      "sageType_StellarSetOptionsOp\020\327\001\032\004\220\265\030\001\022+\n" +
      " MessageType_StellarChangeTrustOp\020\330\001\032\004\220\265" +
      "\030\001\022*\n\037MessageType_StellarAllowTrustOp\020\331\001" +
      "\032\004\220\265\030\001\022,\n!MessageType_StellarAccountMerg" +
      "eOp\020\332\001\032\004\220\265\030\001\022*\n\037MessageType_StellarManag" +
      "eDataOp\020\334\001\032\004\220\265\030\001\022,\n!MessageType_StellarB" +
      "umpSequenceOp\020\335\001\032\004\220\265\030\001\022&\n\033MessageType_St" +
      "ellarSignedTx\020\346\001\032\004\230\265\030\001\022%\n\032MessageType_Tr" +
      "onGetAddress\020\372\001\032\004\220\265\030\001\022\"\n\027MessageType_Tro" +
      "nAddress\020\373\001\032\004\230\265\030\001\022!\n\026MessageType_TronSig" +
      "nTx\020\374\001\032\004\220\265\030\001\022#\n\030MessageType_TronSignedTx" +
      "\020\375\001\032\004\230\265\030\001\022$\n\031MessageType_CardanoSignTx\020\257" +
      "\002\032\004\220\265\030\001\022\'\n\034MessageType_CardanoTxRequest\020" +
      "\260\002\032\004\230\265\030\001\022*\n\037MessageType_CardanoGetPublic" +
      "Key\020\261\002\032\004\220\265\030\001\022\'\n\034MessageType_CardanoPubli" +
      "cKey\020\262\002\032\004\230\265\030\001\022(\n\035MessageType_CardanoGetA" +
      "ddress\020\263\002\032\004\220\265\030\001\022%\n\032MessageType_CardanoAd" +
      "dress\020\264\002\032\004\230\265\030\001\022#\n\030MessageType_CardanoTxA" +
      "ck\020\265\002\032\004\220\265\030\001\022&\n\033MessageType_CardanoSigned" +
      "Tx\020\266\002\032\004\230\265\030\001\022)\n\036MessageType_OntologyGetAd" +
      "dress\020\336\002\032\004\220\265\030\001\022&\n\033MessageType_OntologyAd" +
      "dress\020\337\002\032\004\230\265\030\001\022+\n MessageType_OntologyGe" +
      "tPublicKey\020\340\002\032\004\220\265\030\001\022(\n\035MessageType_Ontol" +
      "ogyPublicKey\020\341\002\032\004\230\265\030\001\022+\n MessageType_Ont" +
      "ologySignTransfer\020\342\002\032\004\220\265\030\001\022-\n\"MessageTyp" +
      "e_OntologySignedTransfer\020\343\002\032\004\230\265\030\001\022.\n#Mes" +
      "sageType_OntologySignWithdrawOng\020\344\002\032\004\220\265\030" +
      "\001\0220\n%MessageType_OntologySignedWithdrawO" +
      "ng\020\345\002\032\004\230\265\030\001\0220\n%MessageType_OntologySignO" +
      "ntIdRegister\020\346\002\032\004\220\265\030\001\0222\n\'MessageType_Ont" +
      "ologySignedOntIdRegister\020\347\002\032\004\230\265\030\001\0225\n*Mes" +
      "sageType_OntologySignOntIdAddAttributes\020" +
      "\350\002\032\004\220\265\030\001\0227\n,MessageType_OntologySignedOn" +
      "tIdAddAttributes\020\351\002\032\004\230\265\030\001\022\'\n\034MessageType" +
      "_RippleGetAddress\020\220\003\032\004\220\265\030\001\022$\n\031MessageTyp" +
      "e_RippleAddress\020\221\003\032\004\230\265\030\001\022#\n\030MessageType_" +
      "RippleSignTx\020\222\003\032\004\220\265\030\001\022%\n\032MessageType_Rip" +
      "pleSignedTx\020\223\003\032\004\220\265\030\001\0223\n(MessageType_Mone" +
      "roTransactionInitRequest\020\365\003\032\004\230\265\030\001\022/\n$Mes" +
      "sageType_MoneroTransactionInitAck\020\366\003\032\004\230\265" +
      "\030\001\0227\n,MessageType_MoneroTransactionSetIn" +
      "putRequest\020\367\003\032\004\230\265\030\001\0223\n(MessageType_Moner" +
      "oTransactionSetInputAck\020\370\003\032\004\230\265\030\001\022@\n5Mess" +
      "ageType_MoneroTransactionInputsPermutati" +
      "onRequest\020\371\003\032\004\230\265\030\001\022<\n1MessageType_Monero" +
      "TransactionInputsPermutationAck\020\372\003\032\004\230\265\030\001" +
      "\0228\n-MessageType_MoneroTransactionInputVi" +
      "niRequest\020\373\003\032\004\230\265\030\001\0224\n)MessageType_Monero" +
      "TransactionInputViniAck\020\374\003\032\004\230\265\030\001\022;\n0Mess" +
      "ageType_MoneroTransactionAllInputsSetReq" +
      "uest\020\375\003\032\004\230\265\030\001\0227\n,MessageType_MoneroTrans" +
      "actionAllInputsSetAck\020\376\003\032\004\230\265\030\001\0228\n-Messag" +
      "eType_MoneroTransactionSetOutputRequest\020" +
      "\377\003\032\004\230\265\030\001\0224\n)MessageType_MoneroTransactio" +
      "nSetOutputAck\020\200\004\032\004\230\265\030\001\0228\n-MessageType_Mo" +
      "neroTransactionAllOutSetRequest\020\201\004\032\004\230\265\030\001" +
      "\0224\n)MessageType_MoneroTransactionAllOutS" +
      "etAck\020\202\004\032\004\230\265\030\001\0228\n-MessageType_MoneroTran" +
      "sactionSignInputRequest\020\203\004\032\004\230\265\030\001\0224\n)Mess" +
      "ageType_MoneroTransactionSignInputAck\020\204\004" +
      "\032\004\230\265\030\001\0224\n)MessageType_MoneroTransactionF" +
      "inalRequest\020\205\004\032\004\230\265\030\001\0220\n%MessageType_Mone" +
      "roTransactionFinalAck\020\206\004\032\004\230\265\030\001\0226\n+Messag" +
      "eType_MoneroKeyImageExportInitRequest\020\222\004" +
      "\032\004\230\265\030\001\0222\n\'MessageType_MoneroKeyImageExpo" +
      "rtInitAck\020\223\004\032\004\230\265\030\001\0224\n)MessageType_Monero" +
      "KeyImageSyncStepRequest\020\224\004\032\004\230\265\030\001\0220\n%Mess" +
      "ageType_MoneroKeyImageSyncStepAck\020\225\004\032\004\230\265" +
      "\030\001\0225\n*MessageType_MoneroKeyImageSyncFina" +
      "lRequest\020\226\004\032\004\230\265\030\001\0221\n&MessageType_MoneroK" +
      "eyImageSyncFinalAck\020\227\004\032\004\230\265\030\001\022\'\n\034MessageT" +
      "ype_MoneroGetAddress\020\234\004\032\004\220\265\030\001\022$\n\031Message" +
      "Type_MoneroAddress\020\235\004\032\004\230\265\030\001\022(\n\035MessageTy" +
      "pe_MoneroGetWatchKey\020\236\004\032\004\220\265\030\001\022%\n\032Message" +
      "Type_MoneroWatchKey\020\237\004\032\004\230\265\030\001\022-\n\"MessageT" +
      "ype_DebugMoneroDiagRequest\020\242\004\032\004\220\265\030\001\022)\n\036M" +
      "essageType_DebugMoneroDiagAck\020\243\004\032\004\230\265\030\001\022," +
      "\n!MessageType_MoneroGetTxKeyRequest\020\246\004\032\004" +
      "\220\265\030\001\022(\n\035MessageType_MoneroGetTxKeyAck\020\247\004" +
      "\032\004\230\265\030\001\0224\n)MessageType_MoneroLiveRefreshS" +
      "tartRequest\020\250\004\032\004\220\265\030\001\0220\n%MessageType_Mone" +
      "roLiveRefreshStartAck\020\251\004\032\004\230\265\030\001\0223\n(Messag" +
      "eType_MoneroLiveRefreshStepRequest\020\252\004\032\004\220" +
      "\265\030\001\022/\n$MessageType_MoneroLiveRefreshStep" +
      "Ack\020\253\004\032\004\230\265\030\001\0224\n)MessageType_MoneroLiveRe" +
      "freshFinalRequest\020\254\004\032\004\220\265\030\001\0220\n%MessageTyp" +
      "e_MoneroLiveRefreshFinalAck\020\255\004\032\004\230\265\030\001\022&\n\033" +
      "MessageType_EosGetPublicKey\020\330\004\032\004\220\265\030\001\022#\n\030" +
      "MessageType_EosPublicKey\020\331\004\032\004\230\265\030\001\022 \n\025Mes" +
      "sageType_EosSignTx\020\332\004\032\004\220\265\030\001\022)\n\036MessageTy" +
      "pe_EosTxActionRequest\020\333\004\032\004\230\265\030\001\022%\n\032Messag" +
      "eType_EosTxActionAck\020\334\004\032\004\220\265\030\001\022\"\n\027Message" +
      "Type_EosSignedTx\020\335\004\032\004\230\265\030\001:4\n\007wire_in\022!.g" +
      "oogle.protobuf.EnumValueOptions\030\322\206\003 \001(\010:" +
      "5\n\010wire_out\022!.google.protobuf.EnumValueO" +
      "ptions\030\323\206\003 \001(\010::\n\rwire_debug_in\022!.google" +
      ".protobuf.EnumValueOptions\030\324\206\003 \001(\010:;\n\016wi" +
      "re_debug_out\022!.google.protobuf.EnumValue" +
      "Options\030\325\206\003 \001(\010:6\n\twire_tiny\022!.google.pr" +
      "otobuf.EnumValueOptions\030\326\206\003 \001(\010:<\n\017wire_" +
      "bootloader\022!.google.protobuf.EnumValueOp" +
      "tions\030\327\206\003 \001(\010:8\n\013wire_no_fsm\022!.google.pr" +
      "otobuf.EnumValueOptions\030\330\206\003 \001(\010B4\n#com.s" +
      "atoshilabs.trezor.lib.protobufB\rTrezorMe" +
      "ssage"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        }, assigner);
    wireIn.internalInit(descriptor.getExtensions().get(0));
    wireOut.internalInit(descriptor.getExtensions().get(1));
    wireDebugIn.internalInit(descriptor.getExtensions().get(2));
    wireDebugOut.internalInit(descriptor.getExtensions().get(3));
    wireTiny.internalInit(descriptor.getExtensions().get(4));
    wireBootloader.internalInit(descriptor.getExtensions().get(5));
    wireNoFsm.internalInit(descriptor.getExtensions().get(6));
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireBootloader);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireDebugIn);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireDebugOut);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireIn);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireNoFsm);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireOut);
    registry.add(com.satoshilabs.trezor.lib.protobuf.TrezorMessage.wireTiny);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
